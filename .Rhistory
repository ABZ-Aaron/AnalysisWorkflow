postResample(ypred, y)
rSquared(y, model$residuals )
corr(y, diamonds$carat)
cor(y, diamonds$carat)
setwd("/Users/aaronwright/Documents/DataScience/R/DQ-AnalysisWorkflow")
knitr::opts_chunk$set(echo = TRUE)
# Import libraries
library(tidyverse)
# Import Data
books <- read_csv("book_reviews.csv")
# Import Data
books <- read_csv("book_reviews.csv", col_types = cols())
glimpse(books)
# Returns number of rows
nrow(books)
# Returns number of columns
ncol(books)
# Returns both the number of columns and rows
dim(books)
# Returns the top part and bottom part of a dataset
head(books)
tail(books)
colnames(books)
colnames(books)
for (col in colnames(books)) {
typeof(books[[col]])
}
for (col in colnames(books)) {
print(typeof(books[[col]]))
}
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
print(output)
}
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
x <- data.frame("yes", "no")
print(output)
}
print(x)
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
print(output)
}
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
print(output)
paste("on the ", col, "rd count: ", col, sep="")
}
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
print(output)
print(paste("on the ", col, "rd count: ", col, sep=""))
}
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
print(paste(col ":" typeof(books[[col]], sep=""))
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
print(paste(col, ":", typeof(books[[col]], sep=""))
}
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
print(output)
paste("on the ", col, "rd count: ", col, sep="")
}
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
print(output)
print(paste("on the ", col, "rd count: ", col))
}
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
print(output)
print(paste(col, col, "rd count: ", col))
}
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
print(output)
print(paste(col, "col", "rd count: ", col))
}
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
print(output)
print(paste(col, ":", "rd count: ", col))
}
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
type <- typeof(book[[col]])
print(paste(col, ":", type, col))
}
for (col in colnames(books)) {
output <- c(col, typeof(books[[col]]))
type <- typeof(books[[col]])
print(paste(col, ":", type, col))
}
for (col in colnames(books)) {
type <- typeof(books[[col]])
print(paste(col, ":", type))
}
summary(books)
sapply(books, range)
T(sapply(books$price, range))
t(sapply(books$price, range))
sapply(books$price, range)
sapply(books[[price]], range)
sapply(books, range)
sapply(books[,price], range)
sapply(books[,4], range)
unique(books)
unique(books$book)
t(unique(books$book))
uniques <- list()
for (col in colnames(books)) {
}
unique(books$book)
for (col in colnames(books)) {
print(unique(books[[col]]))
}
unique(books$book)
for (col in colnames(books)) {
print(unique(books[[col]]))
print(10*"-")
}
for (col in colnames(books)) {
print(unique(books[[col]]))
}
unique(books$book)
for (col in colnames(books)) {
print(unique(books[[col]]))
}
books %>% summarise_all(funs(n_distinct(.)))
# Check which columns have missing data
for (col in colnames(books)) {
is.na(books[[col]])
}
# Check which columns have missing data
for (col in colnames(books)) {
print(is.na(books[[col]]))
}
# Check which columns have missing data
for (col in colnames(books)) {
is.na(books[[col]])
}
# Check which columns have missing data
for (col in colnames(books)) {
bool <- is.na(books[[col]])
if (TRUE in bool) {
# Check which columns have missing data
for (col in colnames(books)) {
bool <- is.na(books[[col]])
if (TRUE %in% bool) {
print("yes")
}
}
# Check which columns have missing data
for (col in colnames(books)) {
bool <- is.na(books[[col]])
if (TRUE %in% bool) {
print("yes")
}
}
# Check which columns have missing data
for (col in colnames(books)) {
bool <- is.na(books[[col]])
print("ye")
if (TRUE %in% bool) {
print("yes")
}
}
# Check which columns have missing data
for (col in colnames(books)) {
bool <- is.na(books[[col]])
if (TRUE %in% bool) {
print("Missing")
} else {
print("Fine")
}
}
# Check which columns have missing data
for (col in colnames(books)) {
bool <- is.na(books[[col]]) %>% if_else(TRUE %in% bool, "yes", "no")
if (TRUE %in% bool) {
print("Missing")
} else {
print("Fine")
}
}
# Check which columns have missing data
for (col in colnames(books)) {
bool <- is.na(books[[col]]) %>% if_else(we = TRUE %in% bool, "yes", "no")
if (TRUE %in% bool) {
print("Missing")
} else {
print("Fine")
}
}
# Check which columns have missing data
for (col in colnames(books)) {
bool <- is.na(books[[col]]) %>% if_else(we = TRUE %in% bool, "yes", "no")
if (TRUE %in% bool) {
print("Missing")
} else {
print("Fine")
print(we)
}
}
# Check which columns have missing data
for (col in colnames(books)) {
bool <- is.na(books[[col]])
if (TRUE %in% bool) {
print("Missing")
} else {
print("Fine")
}
}
# Check which columns have missing data
for (col in colnames(books)) {
bool <- is.na(books[[col]])
print(bool)
if (TRUE %in% bool) {
print("Missing")
} else {
print("Fine")
}
}
# Check which columns have missing data
for (col in colnames(books)) {
bool <- is.na(books[[col]])
if (TRUE %in% bool) {
print("Missing")
} else {
print("Fine")
}
}
books_new <- books %>% filter(!is.na(review))
# This filters the dataframe by all reviews that are not of NA value
books_new <- books %>% filter(!is.na(review))
head(books)
# This filters the dataframe by all reviews that are not of NA value
books_new <- books %>% filter(!is.na(review))
dim(books)
# This filters the dataframe by all reviews that are not of NA value
books_new <- books %>% filter(!is.na(review))
dim(books_new)
# This filters the dataframe by all reviews that are not of NA value
books_new <- books %>% filter(!is.na(review))
nrow(book) - nrow(books_new)
# This filters the dataframe by all reviews that are not of NA value
books_new <- books %>% filter(!is.na(review))
nrow(books) - nrow(books_new)
colSums(is.na(books)) > 0
colSums(is.na(books)) > 0
books %>% select(where(~ all(!is.na(.))))
sapply(books, anyNA)
sapply(books, anyNA)
sapply(books, anyNA)
sapply(books, mean)
sapply(books$price, mean)
sapply(books[[price]], mean)
sapply(books, anyNA)
sapply(books$price, anyNA)
sapply(books$price, mean)
sapply(books[,1], mean)
sapply(books[,4], mean)
head(new_books, 20)
head(books_new, 20)
head(books_new, 10)
unique(books_new$state)
?mutate
books_news <- books_new %>%
mutate(state_new = case_when(
state == "TX" ~ "Texas",
state == "NY" ~ "New York",
state == "FL" ~ "Florida",
state == "CA" ~ "California",
TRUE ~ state
))
books_news <- books_new %>%
mutate(state_new = case_when(
state == "TX" ~ "Texas",
state == "NY" ~ "New York",
state == "FL" ~ "Florida",
state == "CA" ~ "California",
TRUE ~ state
))
head(books_news)
books_news <- books_new %>%
mutate(state_new = case_when(
state == "TX" ~ "Texas",
state == "NY" ~ "New York",
state == "FL" ~ "Florida",
state == "CA" ~ "California",
TRUE ~ state
)) %>% select(-state)
books_news <- books_new %>%
mutate(state_new = case_when(
state == "TX" ~ "Texas",
state == "NY" ~ "New York",
state == "FL" ~ "Florida",
state == "CA" ~ "California",
TRUE ~ state
)) %>% select(-state)
books_news
books_new <- books_new %>%
mutate(states = case_when(
state == "TX" ~ "Texas",
state == "NY" ~ "New York",
state == "FL" ~ "Florida",
state == "CA" ~ "California",
TRUE ~ state
)) %>% select(-state)
books_new
books_new <- books_new %>%
mutate(states = case_when(
state == "TX" ~ "Texas",
state == "NY" ~ "New York",
state == "FL" ~ "Florida",
state == "CA" ~ "California",
TRUE ~ state
)) %>% select(-state)
knitr::opts_chunk$set(echo = TRUE)
# Import libraries
library(tidyverse)
# Import Data
books <- read_csv("book_reviews.csv", col_types = cols())
# Glimpse gives us a nice look at the data. It lets us know how many columns and rows there are. It also shows us which columns exist, some of the data associated with these, along with the data type for each column.
glimpse(books)
# Returns number of rows
nrow(books)
# Returns number of columns
ncol(books)
# Returns both the number of columns and rows
dim(books)
# Returns the top part and bottom part of a dataset
head(books)
tail(books)
colnames(books)
for (col in colnames(books)) {
type <- typeof(books[[col]])
print(paste(col, ":", type))
}
summary(books)
sapply(books[,4], range)
for (col in colnames(books)) {
print(unique(books[[col]]))
}
# Check which columns have missing data
for (col in colnames(books)) {
bool <- is.na(books[[col]])
if (TRUE %in% bool) {
print("Missing")
} else {
print("Fine")
}
}
colSums(is.na(books)) > 0
sapply(books, anyNA)
# This filters the dataframe by all reviews that are not of NA value
books_new <- books %>% filter(!is.na(review))
nrow(books) - nrow(books_new)
head(books_new, 10)
unique(books_new$state)
books_new <- books_new %>%
mutate(states = case_when(
state == "TX" ~ "Texas",
state == "NY" ~ "New York",
state == "FL" ~ "Florida",
state == "CA" ~ "California",
TRUE ~ state
)) %>% select(-state)
head(books_new)
unique(books_new%states)
unique(books_new$states)
books_new <- books_new %>%
mutate(review_num = case_when(
review == "Poor" ~ 1,
review == "Fair" ~ 2,
review == "Good" ~ 3,
review == "Great" ~ 4,
review == "Excellent" ~ 5
))
head(books_new)
books_new <- books_new %>%
mutate(is_high_review = if_else(review_num >= 4, TRUE, FALSE))
head(books_new)
# Assessing which books have sold the most
sapply(book, count)
# Assessing which books have sold the most
sapply(books_new, count)
# Assessing which books have sold the most
sapply(books_new, frequency)
# Assessing which books have sold the most
count(books_new, book)
# Assessing which books have sold the most
order(count(books_new, book))
# Assessing which books have sold the most
frequency <- count(books_new, book)
frequency[,order(book)]
# Assessing which books have sold the most
frequency <- count(books_new, book)
frequency[order(book),]
# Assessing which books have sold the most
frequency <- count(books_new, book)
frequency
# Assessing which books have sold the most
frequency <- count(books_new, book)
frequency[order(n),]
# Assessing which books have sold the most
frequency <- count(books_new, book)
frequency[,order(n)]
?count
# Assessing which books have sold the most
count(books_new, book, sort = TRUE)
# Assessing which books have made the most money
summarise(new_books)
# Assessing which books have made the most money
summarise(books_new)
books_new
# Assessing which books have made the most money
summarise(books)
# Assessing which books have made the most money
summarize(books)
# Assessing which books have made the most money
summary(books_new)
# Assessing which books have made the most money
rowsum(books_new$book, books_new$price)
# Assessing which books have made the most money
rowsum(books_new$price, books_new$book)
books_new %>%
group_by(book) %>%
summarise(price = sum(price))
gropu_by(books_new, book)
group_by(books_new, book)
grouped <- group_by(books_new, book)
summarise(grouped, price = sum(price))
summarise(grouped, sum(price))
typeof(summarise(grouped, sum(price)))
summarise(grouped, sum(price))
?summarise
?rowsum
ds <- summarise(grouped, sum(price))
ds <- summarise(grouped, price = sum(price))
ds[order(ds$price),]
ds[order(ds$price, decreasing = FALSE),]
ds[order(ds$price, decreasing = TRUE),]
price_total[order(price_total$price, decreasing = TRUE),]
price_total <- summarise(grouped, price = sum(price))
price_total <- summarise(grouped, price = sum(price))
price_total <- summarise(grouped, price = sum(price))
price_total <- summarise(grouped, price = sum(price))
price_total[order(price_total$price, decreasing = TRUE),]
order(price_total$price, decreasing = TRUE)
books_na <- books %>% filter(is.na(review))
books_na
books_na <- books %>% filter(is.na(review))
glimpse(books_na)
books_na <- books %>% filter(is.na(review))
count(books_na, book, sort = TRUE)
count(books, book, sort = TRUE)
books_na <- books %>% filter(is.na(review))
count(books_na, book, sort = TRUE)
count(books_na, review, sort = TRUE)
books_na <- books %>% filter(is.na(review))
count(books_na, book, sort = TRUE)
count(books_na, state, sort = TRUE)
state_group <- books_new %>% groupby(state)
state_group <- books_new %>% group_by(state)
state_group <- books_new %>% group_by(states)
state_group <- books_new %>% group_by(states) %>% summarise(count(book))
table(book_new$book)
table(booksnew$book)
table(books_new$book)
table(books_new$book, books_new$states)
prop.table(books_new$book, books_new$states)
table(books_new$book, books_new$states)
image(table(books_new$book, books_new$states))
# Produce a cross classification table
cct <- table(books_new$book, books_new$states)
par(mfrow = c(2, 2))
cct
image(cct)
# Produce a cross classification table
cct <- table(books_new$book, books_new$states)
cct
image(cct)
# Produce a cross classification table
cct <- table(books_new$book, books_new$states)
cct
install.packages("ztable")
# Import libraries
library(tidyverse)
library(ztable)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("cardiomoon/ztable")
# Import libraries
library(tidyverse)
library(ztable)
library(magrittr)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("cardiomoon/ztable")
options(ztable.type="html")
z=ztable(cct)
print(z,caption="Table 1. Basic Table")
# Import libraries
library(tidyverse)
table(books_new$book, books_new$is_high_review)
table(books_new$book, books_new$is_high_review) %>% mutate(proportion = FALSE / TRUE)
table(books_new$book, books_new$is_high_review) %>% mutate(proportion = 'FALSE' / 'TRUE')
table(books_new$book, books_new$is_high_review)
data.frame(table(books_new$book, books_new$is_high_review))
table(books_new$book, books_new$is_high_review)
